!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.9~svn20110310	//
A	serialize_ex.cpp	/^typedef struct A {$/;"	s	file:
BUFF_SIZE	xmsq.h	5;"	d
STATUS_EMPTY	speed.cpp	118;"	d	file:
STATUS_PROCESSED	speed.cpp	120;"	d	file:
STATUS_READY	speed.cpp	119;"	d	file:
__KEYPAIR_H	keypair.h	2;"	d
_debug	xsz_ex.cpp	/^int	_debug = 0;$/;"	v
_safeq	speed.cpp	/^safe_queue<mydata_t>	_safeq;		\/\/ send queue for publisher$/;"	v
a	serialize_ex.cpp	/^	int a;$/;"	m	struct:A	file:
addrinfo	keypair.cpp	/^struct WalletAddrHelpInfo addrinfo = {$/;"	v	typeref:struct:WalletAddrHelpInfo
addrinfo	keypair_ex.cpp	/^struct WalletAddrHelpInfo addrinfo = {$/;"	v	typeref:struct:WalletAddrHelpInfo
ai_msq_open	xmsq.cpp	/^int ai_msq_open(int key, int queue_size)$/;"	f
data	speed.cpp	/^	string data;$/;"	m	struct:__anon1	file:
data_t	xmsq.h	/^} data_t;$/;"	t	typeref:struct:__anon3
dd	xsz_ex.cpp	/^	double dd;$/;"	m	struct:__anon4	file:
deserialize	serialize_ex.cpp	/^test_struct_t deserialize(char *buf) {$/;"	f
ff	xsz_ex.cpp	/^	float ff;$/;"	m	struct:__anon4	file:
file_get	rapidjson_ex.cpp	/^char	*file_get(char *path)$/;"	f
i16	xsz_ex.cpp	/^	int16_t i16;$/;"	m	struct:__anon4	file:
i32	xsz_ex.cpp	/^	int32_t i32;$/;"	m	struct:__anon4	file:
i64	xsz_ex.cpp	/^	int64_t i64;$/;"	m	struct:__anon4	file:
i8	xsz_ex.cpp	/^	int8_t i8;$/;"	m	struct:__anon4	file:
main	bigint_ex.cpp	/^int main(){$/;"	f
main	keypair.cpp	/^int	main(int ac, char *av[])$/;"	f
main	keypair_ex.cpp	/^int	main()$/;"	f
main	leveldb_test.cpp	/^int	main(int ac, char *av[])$/;"	f
main	leveldbex.cpp	/^int main()$/;"	f
main	rapidjson_ex.cpp	/^int	main(int ac, char *av[])$/;"	f
main	serialize_ex.cpp	/^int main() {$/;"	f
main	speed.cpp	/^int	main(int ac, char *av[])$/;"	f
main	xsz_ex.cpp	/^main(int ac, char *av[])$/;"	f
main	zmq_cli.cpp	/^int	main(int ac, char *av[])$/;"	f
main	zmq_msvr.cpp	/^int	main(int ac, char *av[])$/;"	f
main	zmq_svr.cpp	/^int	main(int ac, char *av[])$/;"	f
max_value	bigint_ex.cpp	/^void max_value(void) $/;"	f
memory_test	speed.cpp	/^void	memory_test()$/;"	f
message	speed.cpp	/^	char	message[256];$/;"	m	struct:__anon2	file:
mtext	xmsq.h	/^	char    mtext[BUFF_SIZE];$/;"	m	struct:__anon3
mtx	speed.cpp	/^pthread_mutex_t mtx;$/;"	v
mtype	xmsq.h	/^	long    mtype;$/;"	m	struct:__anon3
mutex_test_queue	speed.cpp	/^void	mutex_test_queue()$/;"	f
mutex_test_vector	speed.cpp	/^void	mutex_test_vector()$/;"	f
mydata_t	speed.cpp	/^} mydata_t;$/;"	t	typeref:struct:__anon1	file:
myq	speed.cpp	/^queue<string> myq;$/;"	v
mytxdata_t	speed.cpp	/^}	mytxdata_t;$/;"	t	typeref:struct:__anon2	file:
not_secure_random	bigint_ex.cpp	/^void not_secure_random(uint8_t *dst, int n){$/;"	f
nthread	speed.cpp	/^int	nthread = 4;$/;"	v
pop_count	speed.cpp	/^int	pop_count = 0;$/;"	v
privinfo	keypair.cpp	/^struct PrivateKeyHelpInfo privinfo = {$/;"	v	typeref:struct:PrivateKeyHelpInfo
privinfo	keypair_ex.cpp	/^struct PrivateKeyHelpInfo privinfo = {$/;"	v	typeref:struct:PrivateKeyHelpInfo
pubkey	speed.cpp	/^	char	pubkey[64];$/;"	m	struct:__anon2	file:
push_count	speed.cpp	/^int	push_count = 0;$/;"	v
push_pull	zmq_cli.cpp	/^void	push_pull(int direc)$/;"	f
push_pull	zmq_svr.cpp	/^void	push_pull(int direc)$/;"	f
req_rep	zmq_cli.cpp	/^void	req_rep(int ac, char *av[])$/;"	f
req_rep	zmq_svr.cpp	/^void	req_rep(int ac, char *av[])$/;"	f
seq	speed.cpp	/^	uint32_t	seq;		\/\/ TX sequence$/;"	m	struct:__anon1	file:
serialize	serialize_ex.cpp	/^char *serialize(test_struct_t t) {$/;"	f
seriz_test_t	xsz_ex.cpp	/^} seriz_test_t;$/;"	t	typeref:struct:__anon4	file:
set_struct	xsz_ex.cpp	/^void	set_struct(seriz_test_t& tx)$/;"	f
sign	speed.cpp	/^	char	sign[128];$/;"	m	struct:__anon2	file:
status	speed.cpp	/^	int	status;		\/\/ 1=ready 2=processed$/;"	m	struct:__anon2	file:
status	speed.cpp	/^	uint32_t	status;		\/\/ see above TXCHAIN_STATUS_xxx$/;"	m	struct:__anon1	file:
stcmp	xsz_ex.cpp	/^int	stcmp(seriz_test_t *tx1, seriz_test_t *tx2)$/;"	f
str	serialize_ex.cpp	/^	char *str;$/;"	m	struct:A	file:
str1	xsz_ex.cpp	/^	string str1;$/;"	m	struct:__anon4	file:
str2	xsz_ex.cpp	/^	string str2;$/;"	m	struct:__anon4	file:
test_c	xsz_ex.cpp	/^int	test_c(seriz_test_t& tx)$/;"	f
test_cpp	xsz_ex.cpp	/^int	test_cpp(seriz_test_t& tx)$/;"	f
test_create_key_pairs	keypair_ex.cpp	/^void	test_create_key_pairs(void)$/;"	f
test_create_pub_key_binarys	keypair_ex.cpp	/^void	test_create_pub_key_binarys(void)$/;"	f
test_queue	speed.cpp	/^void	test_queue()$/;"	f
test_struct_t	serialize_ex.cpp	/^} test_struct_t;$/;"	t	typeref:struct:A	file:
thread_mutex_test_queue	speed.cpp	/^void	*thread_mutex_test_queue(void *arg)$/;"	f
thread_mutex_test_vector	speed.cpp	/^void	*thread_mutex_test_vector(void *arg)$/;"	f
thread_queue_recv	speed.cpp	/^void	*thread_queue_recv(void *arg)$/;"	f
thread_queue_send	speed.cpp	/^void	*thread_queue_send(void *arg)$/;"	f
u16	xsz_ex.cpp	/^	uint16_t u16;$/;"	m	struct:__anon4	file:
u32	xsz_ex.cpp	/^	uint32_t u32;$/;"	m	struct:__anon4	file:
u64	xsz_ex.cpp	/^	uint64_t u64;$/;"	m	struct:__anon4	file:
u8	xsz_ex.cpp	/^	uint8_t u8;$/;"	m	struct:__anon4	file:
uchar	keypair.cpp	/^typedef unsigned char	uchar;$/;"	t	file:
uchar	keypair_ex.cpp	/^typedef unsigned char	uchar;$/;"	t	file:
valid	speed.cpp	/^	uint32_t	valid;		\/\/ Valid TX mark$/;"	m	struct:__anon1	file:
verified	speed.cpp	/^	int		verified;	\/\/ 0=fail 1=success -1=none $/;"	m	struct:__anon1	file:
verified	speed.cpp	/^	int	verified;$/;"	m	struct:__anon2	file:
worker_routine	zmq_msvr.cpp	/^void	*worker_routine(void *arg)$/;"	f
xorshift32	bigint_ex.cpp	/^uint32_t xorshift32() {$/;"	f
