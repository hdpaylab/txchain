!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.9~svn20110310	//
DEBUG	txcommon.h	21;"	d
DEBUG_SLEEP	txcommon.h	22;"	d
MAX_NODE	txcommon.h	29;"	d
MAX_RECV_QUEUE_SIZE	txcommon.h	34;"	d
MAX_SEND_QUEUE_SIZE	txcommon.h	33;"	d
MAX_SEQ	txcommon.h	38;"	d
MAX_VERIFIER	txcommon.h	31;"	d
MAX_VERIFY_QUEUE_SIZE	txcommon.h	35;"	d
SUBSCRIBER_MSGQ_ID	txcommon.h	111;"	d
TXCHAIN_STATUS_EMPTY	txcommon.h	/^	TXCHAIN_STATUS_EMPTY		= 0x00000000,$/;"	e	enum:__anon2
TXCHAIN_STATUS_READY	txcommon.h	/^	TXCHAIN_STATUS_READY		= 0x00010000,$/;"	e	enum:__anon2
TXCHAIN_STATUS_RECV	txcommon.h	/^	TXCHAIN_STATUS_RECV		= 0x00020000,$/;"	e	enum:__anon2
TXCHAIN_STATUS_VERI	txcommon.h	/^	TXCHAIN_STATUS_VERI		= 0x00040000,$/;"	e	enum:__anon2
TXCHAIN_STATUS_VERI_REQ	txcommon.h	/^	TXCHAIN_STATUS_VERI_REQ		= 0x00080000,$/;"	e	enum:__anon2
TXCHAIN_STATUS_VERI_RESULT	txcommon.h	/^	TXCHAIN_STATUS_VERI_RESULT	= 0x00100000,$/;"	e	enum:__anon2
TXCHAIN_VERIFY_MODEL_QUEUE	txcommon.h	26;"	d
TX_DELIM	txcommon.h	41;"	d
VERIFIER_MSGQ_ID	txcommon.h	112;"	d
ZMQ_FILTER	txcommon.h	40;"	d
__COMMON_H	txcommon.h	2;"	d
__ZHELPERS_HPP_INCLUDED__	zhelpers.hpp	3;"	d
_maxnode	main.cpp	/^int	_maxnode = 1;		\/\/ 나중에 설정으로 뺄 것 $/;"	v
_maxnode	xmain.cpp	/^int	_maxnode = 1;		\/\/ 나중에 설정으로 뺄 것 $/;"	v
_mtx_initialized	queue.cpp	/^int	_mtx_initialized = 0;$/;"	v
_npeer	main.cpp	/^int	_npeer = 0;$/;"	v
_npeer	xmain.cpp	/^int	_npeer = 0;$/;"	v
_nverifier	main.cpp	/^int	_nverifier = MAX_VERIFIER;$/;"	v
_nverifier	xmain.cpp	/^int	_nverifier = MAX_VERIFIER;$/;"	v
_peerlist	main.cpp	/^char	_peerlist[MAX_NODE + 1][40] = {0};$/;"	v
_peerlist	xmain.cpp	/^char	_peerlist[MAX_NODE + 1][40] = {0};$/;"	v
_pop_count	queue.cpp	/^int	_push_count = 0, _pop_count = 0;$/;"	v
_pop_count	xmain.cpp	/^int	_push_count = 0, _pop_count = 0;$/;"	v
_push_count	queue.cpp	/^int	_push_count = 0, _pop_count = 0;$/;"	v
_push_count	xmain.cpp	/^int	_push_count = 0, _pop_count = 0;$/;"	v
_recvmtx	queue.cpp	/^pthread_mutex_t _recvmtx;	\/\/ for _recvq$/;"	v
_recvq	queue.cpp	/^queue<txdata_t>	_recvq;		\/\/ receive queue for subscriber$/;"	v
_sendmtx	queue.cpp	/^pthread_mutex_t _sendmtx;	\/\/ for _sendq$/;"	v
_sendport	main.cpp	/^int	_sendport = 7000;$/;"	v
_sendport	xmain.cpp	/^int	_sendport = 7000;$/;"	v
_sendq	queue.cpp	/^queue<txdata_t>	_sendq;		\/\/ send queue for publisher$/;"	v
_verimtx	queue.cpp	/^pthread_mutex_t _verimtx;	\/\/ for _veriq$/;"	v
_veriq	queue.cpp	/^queue<txdata_t>	_veriq;		\/\/ receive queue for verifier$/;"	v
c99_snprintf	zhelpers.hpp	/^	inline int c99_snprintf(char *outBuf, size_t size, const char *format, ...)$/;"	f
c99_vsnprintf	zhelpers.hpp	/^	inline int c99_vsnprintf(char *outBuf, size_t size, const char *format, va_list ap)$/;"	f
common_queue_pop	queue.cpp	/^txdata_t common_queue_pop(const char *name, queue<txdata_t>& myq, pthread_mutex_t *mtx)$/;"	f
common_queue_push	queue.cpp	/^int	common_queue_push(const char *name, queue<txdata_t>& myq, txdata_t data, pthread_mutex_t *mtx, int max_queue_size)$/;"	f
create_main_threads	main.cpp	/^void	create_main_threads()$/;"	f
create_subscriber_threads	main.cpp	/^void	create_subscriber_threads()$/;"	f
create_verifier_threads	main.cpp	/^void	create_verifier_threads(int nverifiers)$/;"	f
data	txcommon.h	/^	string		data;$/;"	m	struct:__anon3
int64_t	zhelpers.hpp	/^    typedef __int64 int64_t;$/;"	t
main	main.cpp	/^int	main(int ac, char *av[])$/;"	f
main	xmain.cpp	/^int	main(int ac, char *av[])$/;"	f
message	txcommon.h	/^	char	*message;$/;"	m	struct:__anon1
paramsget	params.cpp	/^Params_type_t paramsget(const string& Path)$/;"	f
parse_command_line	main.cpp	/^void	parse_command_line(int ac, char *av[])$/;"	f
parse_command_line	xmain.cpp	/^void	parse_command_line(int ac, char *av[])$/;"	f
pubkey	txcommon.h	/^	char	*pubkey;$/;"	m	struct:__anon1
random	zhelpers.hpp	37;"	d
recvq_pop	queue.cpp	/^txdata_t recvq_pop()$/;"	f
recvq_push	queue.cpp	/^int	recvq_push(txdata_t data)$/;"	f
s_catch_signals	zhelpers.hpp	/^inline static void s_catch_signals ()$/;"	f
s_clock	zhelpers.hpp	/^s_clock (void)$/;"	f
s_console	zhelpers.hpp	/^s_console (const char *format, ...)$/;"	f
s_dump	zhelpers.hpp	/^s_dump (zmq::socket_t & socket)$/;"	f
s_interrupted	zhelpers.hpp	/^static int s_interrupted = 0;$/;"	v
s_recv	zhelpers.hpp	/^inline static bool s_recv(zmq::socket_t & socket, std::string & ostring, int flags = 0)$/;"	f
s_recv	zhelpers.hpp	/^s_recv (zmq::socket_t & socket, int flags = 0) {$/;"	f
s_recv	zhelpers.hpp	/^s_recv(void *socket, int flags = 0) {$/;"	f
s_send	zhelpers.hpp	/^s_send (zmq::socket_t & socket, const std::string & string, int flags = 0) {$/;"	f
s_send	zhelpers.hpp	/^s_send(void *socket, const char *string, int flags = 0) {$/;"	f
s_sendmore	zhelpers.hpp	/^s_sendmore (zmq::socket_t & socket, const std::string & string) {$/;"	f
s_sendmore	zhelpers.hpp	/^s_sendmore(void *socket, char *string) {$/;"	f
s_set_id	zhelpers.hpp	/^s_set_id (zmq::socket_t & socket)$/;"	f
s_set_id	zhelpers.hpp	/^s_set_id(zmq::socket_t & socket, intptr_t id)$/;"	f
s_signal_handler	zhelpers.hpp	/^inline static void s_signal_handler (int sig_handler)$/;"	f
s_sleep	zhelpers.hpp	/^s_sleep (int msecs)$/;"	f
s_version	zhelpers.hpp	/^s_version (void)$/;"	f
s_version_assert	zhelpers.hpp	/^s_version_assert (int want_major, int want_minor)$/;"	f
sendq_pop	queue.cpp	/^txdata_t sendq_pop()$/;"	f
sendq_push	queue.cpp	/^int	sendq_push(txdata_t data)$/;"	f
seq	txcommon.h	/^	uint32_t	seq;		\/\/ TX sequence$/;"	m	struct:__anon3
signature	txcommon.h	/^	char	*signature;$/;"	m	struct:__anon1
sleepms	txcommon.h	37;"	d
snprintf	zhelpers.hpp	44;"	d
srandom	zhelpers.hpp	36;"	d
status	txcommon.h	/^	uint32_t	status;		\/\/ see above TXCHAIN_STATUS_xxx$/;"	m	struct:__anon3
thread_levledb	leveldb.cpp	/^void	*thread_levledb(void *info_p)$/;"	f
thread_levledb	xleveldb.cpp	/^void	*thread_levledb(void *info_p)$/;"	f
thread_publisher	pub.cpp	/^void	*thread_publisher(void *info_p)$/;"	f
thread_publisher	xpub.cpp	/^void	*thread_publisher(void *info_p)$/;"	f
thread_send_test	pub.cpp	/^void	*thread_send_test(void *info_p)$/;"	f
thread_subscriber	sub.cpp	/^void	*thread_subscriber(void *info_p)$/;"	f
thread_subscriber	xsub.cpp	/^void	*thread_subscriber(void *info_p)$/;"	f
thread_verifier	verify.cpp	/^void	*thread_verifier(void *info_p)$/;"	f
thread_verifier	xverify.cpp	/^void	*thread_verifier(void *info_p)$/;"	f
tx_t	txcommon.h	/^}	tx_t;$/;"	t	typeref:struct:__anon1
txdata_t	txcommon.h	/^}	txdata_t;$/;"	t	typeref:struct:__anon3
uint	zhelpers.hpp	/^    typedef unsigned int  uint;$/;"	t
ulong	zhelpers.hpp	/^    typedef unsigned long ulong;$/;"	t
verified	txcommon.h	/^	int		verified;	\/\/ 0=fail 1=success -1=none $/;"	m	struct:__anon3
verified	txcommon.h	/^	int	verified;$/;"	m	struct:__anon1
veriq_pop	queue.cpp	/^txdata_t veriq_pop()$/;"	f
veriq_push	queue.cpp	/^int	veriq_push(txdata_t data)$/;"	f
vsnprintf	zhelpers.hpp	45;"	d
within	zhelpers.hpp	74;"	d
xgetclock	util.cpp	/^double	xgetclock()$/;"	f
